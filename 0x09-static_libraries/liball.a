!<arch>
0-isupper.c/    0           0     0     644     247       `
#include "main.h"

/**
 * _isupper - function that checks for uppercase characters
 * @c: character to be checked
 *
 * Return: 1 if uppercase, otherwise return 0
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);

	return (0);
}

0-memset.c/     0           0     0     644     330       `
#include "main.h"

/**
 * _memset - Fill a block of memory as specified
 * @s: initial address of memory to be filled
 * @b: value
 * @n: number of bytes
 *
 * Return: changes with new value for n bytes
 */

char *_memset(char *s, char b, unsigned int n)
{
	int a = 0;

	for (; n > 0; a++)
	{
		s[a] = b;
		n--;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     324       `
#include "main.h"

/**
 * _strcat - concatenate two strings
 * @dest: value
 * @src: value
 *
 * Return: void
 */

char *_strcat(char *dest, char *src)
{
	int a;
	int b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}
	b = 0;
	while (src[b] != '\0')
	{
		dest[a] = src[b];
		a++;
		b++;
	}
	dest[a] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     454       `
#include "main.h"

/**
 * _atoi - This  function coverts a string to an integer
 * @s: string to be converted
 *
 * Return: an integer
 */

int _atoi(char *s)
{
	int sig = 1;
	int i = 0;
	unsigned int unsig = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sig *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		unsig = (unsig * 10) + (s[i] - '0');
		i++;
	}
	unsig *= sig;
	return (unsig);
}
1-isdigit.c/    0           0     0     644     200       `
#include "main.h"

/**
 * _isdigit - function that checks for digits
 * @c: integer to be checked
 * Return: 1 if c is digit else return 0
 */

int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     328       `
#include "main.h"

/**
 * _memcpy - copy memory area
 * @dest: storage memory
 * @src: source memory
 * @n: number of byte
 *
 * Return: copied memory with updated n bytes
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int h = 0;
	int i = n;

	for (; h < i; h++)
	{
		dest[h] = src[h];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     389       `
#include "main.h"

/**
 * _strncat - concatenate two strings using
 * n bytes from src atmost
 * @dest: value
 * @src: value
 * @n: value
 *
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int a;
	int b;

	a = 0;
	while (dest[a] != '\0')
	{
		a++;
	}
	b = 0;
	while (b < n && src[b] != '\0')
	{
		dest[a] = src[b];
		a++;
		b++;
	}
	dest[a] = '\0';
		return (dest);
}

2-strchr.c/     0           0     0     644     261       `
#include "main.h"

/**
 * _strchr - This is the program entry
 * @s: The input
 * @c: The input
 * Return: Always 0 (Success)
 */

char *_strchr(char *s, char c)
{
	int k = 0;

	for (; s[k] >= '\0'; k++)
	{
		if (s[k] == c)
			return (&s[k]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     207       `
#include "main.h"

/**
 * _strlen - To return length of string
 * @s: The string
 * Return: length
 */

int _strlen(char *s)
{
	int longa = 0;

	while (*s != '\0')
	{
		longa++;
		s++;
	}
	return (longa);
}

2-strncpy.c/    0           0     0     644     331       `
#include "main.h"

/**
 * _strncpy - This program copy a string
 * @dest: an input
 * @src: an input
 * @n: an input
 *
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int y = 0;

	while (y < n && src[y] != '\0')
	{
		dest[y] = src[y];
		y++;
	}
	while (y < n)
	{
		dest[y] = '\0';
		y++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     206       `
#include "main.h"

/**
 * _islower - To check for lowercase char@
 * @c: This is the char to check
 * Return: 1 if c is lowercase else, return 0
 */

int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     180       `
#include "main.h"

/**
 * _puts - This is to prints a string to stdout.
 * @str: string to print
 */

void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     293       `
#include "main.h"

/**
 * _strcmp - To compare string values
 * @s1: input
 * @s2: input
 *
 * Return: s1[i] - s2[i]
 */

int _strcmp(char *s1, char *s2)
{
	int w = 0;

	while (s1[w] != '\0' && s2[w] != '\0')
	{
		if (s1[w] != s2[w])
		{
			return (s1[w] - s2[w]);
		}
	w++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     399       `
#include "main.h"

/**
 * _strspn - The entry point for the program
 * @s: an input
 * @accept: an input
 * Return: Always 0 (Success)
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int h;

	while (*s)
	{
		for (h = 0; accept[h]; h++)
		{
			if (*s == accept[h])
			{
				n++;
				break;
			}
			else if (accept[h + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     223       `
#include "main.h"

/**
 * _isalpha - To check alphabets
 * @c: Character to be checked
 * Return: 1 if c is an alphabet else return 0
 */

int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     307       `
#include "main.h"

/**
 * _strpbrk - Entry point for the program
 * @s: an input
 * @accept: an input
 * Return: Always 0 (Success)
 */

char *_strpbrk(char *s, char *accept)
{
	int m;

	while (*s)
	{
		for (m = 0; accept[m]; m++)
		{
			if (*s == accept[m])
				return (s);
		}
	s++;
	}

	return ('\0');
}

5-strstr.c/     0           0     0     644     388       `
#include "main.h"

/**
 * _strstr - Entry point of the program
 * @haystack: an input
 * @needle: an input
 * Return: Always 0 (Success)
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *x = haystack;
		char *y = needle;

		while (*x == *y && *y != '\0')
		{
			x++;
			y++;
		}
		if (*y == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     192       `
#include "main.h"

/**
 * _abs - To compute absolute value of an int
 * @n: int to be checked
 * Return: absolute value
 */

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     357       `
#include "main.h"

/**
 * char *_strcpy - To copy the string pointed to by src
 * @dest: where to copy to
 * @src: where to copy from
 * Return: value of the string
 */

char *_strcpy(char *dest, char *src)
{
	int g = 0;
	int h = 0;

	while (*(src + g) != '\0')
	{
		g++;
	}
	for ( ; h < g; h++)
	{
		dest[h] = src[h];
	}
	dest[g] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

